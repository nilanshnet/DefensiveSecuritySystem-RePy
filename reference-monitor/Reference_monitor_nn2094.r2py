
"""
This security layer handles A/B storage for files in RepyV2.

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
      self.Bfile = openfile(self.Bfn,create)
      if self.Afn in listfiles():
        self.Afile = openfile(self.Afn,create)
      else:    
        self.Afile = openfile(self.Afn,create)
        if (not self.file_check(self.Afile)):
          self.Afile.writeat('SE',0)  
    #opening the existing files if not creating 
    else:
      self.Afile = openfile(self.Afn,False)
      self.Bfile = openfile(self.Bfn,False)

    # Creating locks for files to prevent concurrent usage 
    self.Afile.filelock = createlock()
    self.Bfile.filelock = createlock()



  def file_check(self,input_file):
    data = input_file.readat(None,0)
    if data.startswith("S") and data.endswith("E"):
      return True
    else:
      return False



  def writeat(self,data,offset):
    # use the acquire method to lock the file until release
    self.Bfile.filelock.acquire(True)
    try:
      # Write the requested data to the B file using the sandbox's writeat call
      self.Bfile.writeat(data,offset)
    except:
      pass
    # releasing the lock state
    self.Bfile.filelock.release()



  def readat(self,bytes,offset):
    # using the acquire method for the file A too, to lock until release
    self.Afile.filelock.acquire(True)

    # Read from the A file using the sandbox's readat...
    data_t = self.Afile.readat(bytes,offset)

    # releasing the lock state
    self.Afile.filelock.release()
    
    return data_t



  def close(self):
    # using the acquire method to lock the file until release
    self.Bfile.filelock.acquire(True)
    self.Afile.filelock.acquire(True)
    
    # Two conditions for the reference monitor to do for close method
    # If A and B both the files are valid, original file's data is replaced by that of B
    file_data = self.Bfile.readat(None,0)
    backup_file_data = self.Afile.readat(None,0)

    file_validity_A = self.file_check(self.Afile)
    file_validity_B = self.file_check(self.Bfile)
    
    if file_validity_A and file_validity_B:
      self.Afile.writeat(file_data,0)
      self.Afile.close()
      self.Bfile.close()
    else:
      self.Bfile.writeat(backup_file_data, 0)  
      self.Afile.close()
      self.Bfile.close() 
       
    #releasing the lock state
    self.Afile.filelock.release()
    self.Bfile.filelock.release()
    


def ABopenfile(filename, create):
  return ABFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
