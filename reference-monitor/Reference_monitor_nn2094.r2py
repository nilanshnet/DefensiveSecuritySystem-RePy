"""
This security layer will handle A/B storage for files in RepyV2.


Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"


#valid file must start with S and end with E
def file_check(input_file):
  first_letter = input_file.readat(1,offs_index)
  if first_letter == 'S':
    offs_index = 0
    try:
      while(True): 
        last_letter = input_file.readat(1,offs_index)
        offs_index += 1
    except SeekPastEndOfFileError:
      last_letter = input_file.readat(1,-2)      
    if last_letter == 'E':
      return True
    else:
      return False  


class ABFile():
  def __init__(self,filename,create):
    #check for valid file names, should have only numbers and small case alphabets excluding the extension
    f_name = filename.split('.')
    if any(char.isdigit() for char in f_name[0]) and f_name[0].islower():   
      # globals
      mycontext['debug'] = False   
      # local (per object) reference to the underlying file
      self.Afn = filename+'.a'
      self.Bfn = filename+'.b'

      # make the files and add 'SE' to the readat file...
      if create:
        self.Afile = openfile(self.Afn,create)
        self.Bfile = openfile(self.Bfn,create)
        if (not file_check(self.Afile)):
          self.Afile.writeat('SE',0)
      # if create is false, then open existing files
      # else:
      # self.Afile = openfile(self.Afn,False)
      # self.Bfile = openfile(self.Bfn,False)



    def writeat(self,data,offset):      
      # Write the requested data to the B file using the sandbox's writeat call
      self.Bfile.writeat(data,offset)
    
    def readat(self,bytes,offset):
      # Read from the A file using the sandbox's readat...
      return self.Afile.readat(bytes,offset)

    def close(self):
      self.Afile.close()
      self.Bfile.close()


# used to create or open a file when create == True
def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
